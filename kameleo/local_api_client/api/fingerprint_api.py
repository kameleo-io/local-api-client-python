# coding: utf-8

"""
    kameleo-local-api

    You can use the following API endpoints to communicate with the local running Kameleo programmatically.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from kameleo.local_api_client.models.fingerprint_preview import FingerprintPreview

from kameleo.local_api_client.api_client import ApiClient, RequestSerialized
from kameleo.local_api_client.api_response import ApiResponse
from kameleo.local_api_client.rest import RESTResponseType


class FingerprintApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def search_fingerprints(
        self,
        device_type: Annotated[Optional[StrictStr], Field(description="Filter option for the Device Type. Possible values are 'desktop', 'mobile'.  You can also use a comma-separated list to provide more than one value.")] = None,
        os_family: Annotated[Optional[StrictStr], Field(description="Filter option for os family. Possible values are 'windows', 'macos', 'linux', 'android', 'ios'.  You can also use a comma-separated list to provide more than one value.")] = None,
        browser_product: Annotated[Optional[StrictStr], Field(description="Filter option for browser product. Possible values are 'chrome', 'firefox', 'edge', 'safari'.  You can also use a comma-separated list to provide more than one value.")] = None,
        browser_version: Annotated[Optional[StrictStr], Field(description="Filter option for the browser version.  Includes an optional sign (<, >=, etc.) and a major version number (e.g. 135)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[FingerprintPreview]:
        """Retrieves a set of 25 fingerprints based on specified criteria, with the most recent browser versions at the beginning of the list. Note  that calling this method multiple times will return different sets of fingerprints.


        :param device_type: Filter option for the Device Type. Possible values are 'desktop', 'mobile'.  You can also use a comma-separated list to provide more than one value.
        :type device_type: str
        :param os_family: Filter option for os family. Possible values are 'windows', 'macos', 'linux', 'android', 'ios'.  You can also use a comma-separated list to provide more than one value.
        :type os_family: str
        :param browser_product: Filter option for browser product. Possible values are 'chrome', 'firefox', 'edge', 'safari'.  You can also use a comma-separated list to provide more than one value.
        :type browser_product: str
        :param browser_version: Filter option for the browser version.  Includes an optional sign (<, >=, etc.) and a major version number (e.g. 135)
        :type browser_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_fingerprints_serialize(
            device_type=device_type,
            os_family=os_family,
            browser_product=browser_product,
            browser_version=browser_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[FingerprintPreview]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_fingerprints_with_http_info(
        self,
        device_type: Annotated[Optional[StrictStr], Field(description="Filter option for the Device Type. Possible values are 'desktop', 'mobile'.  You can also use a comma-separated list to provide more than one value.")] = None,
        os_family: Annotated[Optional[StrictStr], Field(description="Filter option for os family. Possible values are 'windows', 'macos', 'linux', 'android', 'ios'.  You can also use a comma-separated list to provide more than one value.")] = None,
        browser_product: Annotated[Optional[StrictStr], Field(description="Filter option for browser product. Possible values are 'chrome', 'firefox', 'edge', 'safari'.  You can also use a comma-separated list to provide more than one value.")] = None,
        browser_version: Annotated[Optional[StrictStr], Field(description="Filter option for the browser version.  Includes an optional sign (<, >=, etc.) and a major version number (e.g. 135)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[FingerprintPreview]]:
        """Retrieves a set of 25 fingerprints based on specified criteria, with the most recent browser versions at the beginning of the list. Note  that calling this method multiple times will return different sets of fingerprints.


        :param device_type: Filter option for the Device Type. Possible values are 'desktop', 'mobile'.  You can also use a comma-separated list to provide more than one value.
        :type device_type: str
        :param os_family: Filter option for os family. Possible values are 'windows', 'macos', 'linux', 'android', 'ios'.  You can also use a comma-separated list to provide more than one value.
        :type os_family: str
        :param browser_product: Filter option for browser product. Possible values are 'chrome', 'firefox', 'edge', 'safari'.  You can also use a comma-separated list to provide more than one value.
        :type browser_product: str
        :param browser_version: Filter option for the browser version.  Includes an optional sign (<, >=, etc.) and a major version number (e.g. 135)
        :type browser_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_fingerprints_serialize(
            device_type=device_type,
            os_family=os_family,
            browser_product=browser_product,
            browser_version=browser_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[FingerprintPreview]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_fingerprints_without_preload_content(
        self,
        device_type: Annotated[Optional[StrictStr], Field(description="Filter option for the Device Type. Possible values are 'desktop', 'mobile'.  You can also use a comma-separated list to provide more than one value.")] = None,
        os_family: Annotated[Optional[StrictStr], Field(description="Filter option for os family. Possible values are 'windows', 'macos', 'linux', 'android', 'ios'.  You can also use a comma-separated list to provide more than one value.")] = None,
        browser_product: Annotated[Optional[StrictStr], Field(description="Filter option for browser product. Possible values are 'chrome', 'firefox', 'edge', 'safari'.  You can also use a comma-separated list to provide more than one value.")] = None,
        browser_version: Annotated[Optional[StrictStr], Field(description="Filter option for the browser version.  Includes an optional sign (<, >=, etc.) and a major version number (e.g. 135)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieves a set of 25 fingerprints based on specified criteria, with the most recent browser versions at the beginning of the list. Note  that calling this method multiple times will return different sets of fingerprints.


        :param device_type: Filter option for the Device Type. Possible values are 'desktop', 'mobile'.  You can also use a comma-separated list to provide more than one value.
        :type device_type: str
        :param os_family: Filter option for os family. Possible values are 'windows', 'macos', 'linux', 'android', 'ios'.  You can also use a comma-separated list to provide more than one value.
        :type os_family: str
        :param browser_product: Filter option for browser product. Possible values are 'chrome', 'firefox', 'edge', 'safari'.  You can also use a comma-separated list to provide more than one value.
        :type browser_product: str
        :param browser_version: Filter option for the browser version.  Includes an optional sign (<, >=, etc.) and a major version number (e.g. 135)
        :type browser_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_fingerprints_serialize(
            device_type=device_type,
            os_family=os_family,
            browser_product=browser_product,
            browser_version=browser_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[FingerprintPreview]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_fingerprints_serialize(
        self,
        device_type,
        os_family,
        browser_product,
        browser_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if device_type is not None:
            
            _query_params.append(('deviceType', device_type))
            
        if os_family is not None:
            
            _query_params.append(('osFamily', os_family))
            
        if browser_product is not None:
            
            _query_params.append(('browserProduct', browser_product))
            
        if browser_version is not None:
            
            _query_params.append(('browserVersion', browser_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/fingerprints',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


