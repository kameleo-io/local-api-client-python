# coding: utf-8

"""
    kameleo-local-api

    You can use the following API endpoints to communicate with the local running Kameleo programmatically.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kameleo.local_api_client.models.audio_spoofing_type import AudioSpoofingType
from kameleo.local_api_client.models.canvas_spoofing_type import CanvasSpoofingType
from kameleo.local_api_client.models.device_memory_choice import DeviceMemoryChoice
from kameleo.local_api_client.models.font_spoofing_type import FontSpoofingType
from kameleo.local_api_client.models.geolocation_choice import GeolocationChoice
from kameleo.local_api_client.models.hardware_concurrency_choice import HardwareConcurrencyChoice
from kameleo.local_api_client.models.password_manager_type import PasswordManagerType
from kameleo.local_api_client.models.profile_storage_location import ProfileStorageLocation
from kameleo.local_api_client.models.proxy_choice import ProxyChoice
from kameleo.local_api_client.models.screen_choice import ScreenChoice
from kameleo.local_api_client.models.timezone_choice import TimezoneChoice
from kameleo.local_api_client.models.web_rtc_choice import WebRtcChoice
from kameleo.local_api_client.models.webgl_meta_choice import WebglMetaChoice
from kameleo.local_api_client.models.webgl_spoofing_type import WebglSpoofingType
from typing import Optional, Set
from typing_extensions import Self

class UpdateProfileRequest(BaseModel):
    """
    UpdateProfileRequest
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Profile name property. The value obtained by file name for existing profiles. For new profiles the value is generated by a random name  generator.")
    folder_id: Optional[StrictStr] = Field(default=None, description="Id of the folder the profile should be moved to.", alias="folderId")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Profile tags")
    canvas: Optional[CanvasSpoofingType] = None
    webgl: Optional[WebglSpoofingType] = None
    webgl_meta: Optional[WebglMetaChoice] = Field(default=None, alias="webglMeta")
    audio: Optional[AudioSpoofingType] = None
    timezone: Optional[TimezoneChoice] = None
    geolocation: Optional[GeolocationChoice] = None
    proxy: Optional[ProxyChoice] = None
    web_rtc: Optional[WebRtcChoice] = Field(default=None, alias="webRtc")
    fonts: Optional[FontSpoofingType] = None
    screen: Optional[ScreenChoice] = None
    hardware_concurrency: Optional[HardwareConcurrencyChoice] = Field(default=None, alias="hardwareConcurrency")
    device_memory: Optional[DeviceMemoryChoice] = Field(default=None, alias="deviceMemory")
    language: Optional[StrictStr] = Field(default=None, description="Language of the profile as ISO 639-1 language and optionally ISO 3166-1 region code.")
    start_page: Optional[StrictStr] = Field(default=None, description="This website will be opened in the browser when the profile launches.", alias="startPage")
    password_manager: Optional[PasswordManagerType] = Field(default=None, alias="passwordManager")
    extensions: Optional[List[StrictStr]] = Field(default=None, description="A list of extensions or addons should be loaded to the browser when starting the profile. For extensions that are added now, it should be  an absolute path.  For extensions already added to the profile in a previous update, the name is only enough.  For chrome and edge use CRX3 format extensions. For firefox use signed xpi format addons.")
    notes: Optional[StrictStr] = Field(default=None, description="A free text including any notes written by the user.")
    storage: Optional[ProfileStorageLocation] = None
    __properties: ClassVar[List[str]] = ["name", "folderId", "tags", "canvas", "webgl", "webglMeta", "audio", "timezone", "geolocation", "proxy", "webRtc", "fonts", "screen", "hardwareConcurrency", "deviceMemory", "language", "startPage", "passwordManager", "extensions", "notes", "storage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateProfileRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of webgl_meta
        if self.webgl_meta:
            _dict['webglMeta'] = self.webgl_meta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timezone
        if self.timezone:
            _dict['timezone'] = self.timezone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geolocation
        if self.geolocation:
            _dict['geolocation'] = self.geolocation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proxy
        if self.proxy:
            _dict['proxy'] = self.proxy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of web_rtc
        if self.web_rtc:
            _dict['webRtc'] = self.web_rtc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of screen
        if self.screen:
            _dict['screen'] = self.screen.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hardware_concurrency
        if self.hardware_concurrency:
            _dict['hardwareConcurrency'] = self.hardware_concurrency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device_memory
        if self.device_memory:
            _dict['deviceMemory'] = self.device_memory.to_dict()
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if folder_id (nullable) is None
        # and model_fields_set contains the field
        if self.folder_id is None and "folder_id" in self.model_fields_set:
            _dict['folderId'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if language (nullable) is None
        # and model_fields_set contains the field
        if self.language is None and "language" in self.model_fields_set:
            _dict['language'] = None

        # set to None if start_page (nullable) is None
        # and model_fields_set contains the field
        if self.start_page is None and "start_page" in self.model_fields_set:
            _dict['startPage'] = None

        # set to None if extensions (nullable) is None
        # and model_fields_set contains the field
        if self.extensions is None and "extensions" in self.model_fields_set:
            _dict['extensions'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateProfileRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "folderId": obj.get("folderId"),
            "tags": obj.get("tags"),
            "canvas": obj.get("canvas"),
            "webgl": obj.get("webgl"),
            "webglMeta": WebglMetaChoice.from_dict(obj["webglMeta"]) if obj.get("webglMeta") is not None else None,
            "audio": obj.get("audio"),
            "timezone": TimezoneChoice.from_dict(obj["timezone"]) if obj.get("timezone") is not None else None,
            "geolocation": GeolocationChoice.from_dict(obj["geolocation"]) if obj.get("geolocation") is not None else None,
            "proxy": ProxyChoice.from_dict(obj["proxy"]) if obj.get("proxy") is not None else None,
            "webRtc": WebRtcChoice.from_dict(obj["webRtc"]) if obj.get("webRtc") is not None else None,
            "fonts": obj.get("fonts"),
            "screen": ScreenChoice.from_dict(obj["screen"]) if obj.get("screen") is not None else None,
            "hardwareConcurrency": HardwareConcurrencyChoice.from_dict(obj["hardwareConcurrency"]) if obj.get("hardwareConcurrency") is not None else None,
            "deviceMemory": DeviceMemoryChoice.from_dict(obj["deviceMemory"]) if obj.get("deviceMemory") is not None else None,
            "language": obj.get("language"),
            "startPage": obj.get("startPage"),
            "passwordManager": obj.get("passwordManager"),
            "extensions": obj.get("extensions"),
            "notes": obj.get("notes"),
            "storage": obj.get("storage")
        })
        return _obj


