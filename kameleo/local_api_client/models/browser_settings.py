# coding: utf-8

"""
    kameleo-local-api

    You can use the following API endpoints to communicate with the local running Kameleo programmatically.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kameleo.local_api_client.models.preference import Preference
from typing import Optional, Set
from typing_extensions import Self

class BrowserSettings(BaseModel):
    """
    Extra settings and preferences that can be applied to the browser at startup.
    """ # noqa: E501
    arguments: Optional[List[StrictStr]] = Field(default=None, description="Command line arguments that can be passed to the browser at startup. This applies to both Chroma and Junglefox browsers. Do not include the  starting double dash (--).")
    preferences: Optional[List[Preference]] = Field(default=None, description="List of preferences for browsers that can be passed at startup. In case of Chromium based options it will be a user profile preference. In  case of Firefox profiles it will be a preference.")
    additional_options: Optional[List[Preference]] = Field(default=None, description="Special options available only in Kameleo, such as device scale factor for mobile emulated profiles. See the docs for more details.", alias="additionalOptions")
    __properties: ClassVar[List[str]] = ["arguments", "preferences", "additionalOptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BrowserSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in preferences (list)
        _items = []
        if self.preferences:
            for _item_preferences in self.preferences:
                if _item_preferences:
                    _items.append(_item_preferences.to_dict())
            _dict['preferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in additional_options (list)
        _items = []
        if self.additional_options:
            for _item_additional_options in self.additional_options:
                if _item_additional_options:
                    _items.append(_item_additional_options.to_dict())
            _dict['additionalOptions'] = _items
        # set to None if arguments (nullable) is None
        # and model_fields_set contains the field
        if self.arguments is None and "arguments" in self.model_fields_set:
            _dict['arguments'] = None

        # set to None if preferences (nullable) is None
        # and model_fields_set contains the field
        if self.preferences is None and "preferences" in self.model_fields_set:
            _dict['preferences'] = None

        # set to None if additional_options (nullable) is None
        # and model_fields_set contains the field
        if self.additional_options is None and "additional_options" in self.model_fields_set:
            _dict['additionalOptions'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BrowserSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arguments": obj.get("arguments"),
            "preferences": [Preference.from_dict(_item) for _item in obj["preferences"]] if obj.get("preferences") is not None else None,
            "additionalOptions": [Preference.from_dict(_item) for _item in obj["additionalOptions"]] if obj.get("additionalOptions") is not None else None
        })
        return _obj


